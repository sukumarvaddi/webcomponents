{"version":3,"file":"stock-price.js","sourceRoot":"","sources":["../../../src/components/stock-price/stock-price.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Element, Prop, Listen, State, Watch, h } from '@stencil/core';\n\n@Component({\n  tag: 'stock-price',\n  styleUrl: 'stock-price.css',\n  shadow: true,\n})\nexport class StockPrice {\n  input: HTMLInputElement;\n  @State() appState: 'idle' | 'loading' | 'success' | 'error' = 'idle';\n  @State() stockPrice: string = '';\n\n  // Refers to the host element of the component\n  @Element() el: HTMLElement;\n\n  @Prop({ mutable: true, reflect: true }) stockSymbol: string;\n\n  @Watch('stockSymbol')\n  stockSymbolChanged(newValue: string, oldValue: string) {\n    console.log(`stockSymbol changed from ${oldValue} to ${newValue}`);\n    if (newValue && newValue !== oldValue) {\n      this.input.value = newValue; // Update the input value when stockSymbol changes\n      this.fetchStockPriceForStockSymbol(newValue);\n    }\n  }\n\n  hostData() {\n    return {\n      class: 'error',\n    };\n  }\n\n  @Listen('stockSymbolChanged', { target: 'document' })\n  stockSymbolChangedListener(event: CustomEvent<string>) {\n    const newStockSymbol = event.detail;\n    console.log(`Received stock symbol from event: ${newStockSymbol}`);\n    this.stockSymbol = newStockSymbol; // Update the stockSymbol property\n  }\n\n  constructor() {\n    this.fetchStockPrice = this.fetchStockPrice.bind(this);\n  }\n\n  componentWillLoad() {\n    console.log('Component will load');\n    console.log(this.stockSymbol);\n  }\n\n  componentDidLoad() {\n    console.log('Component did load');\n    if (this.stockSymbol) {\n      this.input.value = this.stockSymbol; // Set the input value if stockSymbol is provided\n      this.fetchStockPriceForStockSymbol(this.stockSymbol);\n    }\n  }\n  componentWillUpdate() {\n    console.log('Component will update');\n  }\n\n  componentDidUpdate() {\n    console.log('Component did update');\n  }\n\n  componentWillRender() {\n    console.log('Component will render');\n  }\n\n  componentDidRender() {\n    console.log('Component did render');\n  }\n\n  disconnectedCallback() {\n    console.log('Component did unload');\n  }\n\n  fetchStockPrice = async (event: Event) => {\n    event.preventDefault();\n    // Option 1\n    // const form = event.target as HTMLFormElement;\n    // const stockSymbol = form['stock-symbol'].value.trim().toUpperCase();\n\n    //Option 2\n    // const stockSymbol = this.el.shadowRoot.querySelector<HTMLInputElement>('#stock-symbol')?.value.trim().toUpperCase();\n\n    //Option 3\n    const stockSymbol = this.input.value.trim().toUpperCase();\n    this.stockSymbol = stockSymbol; // Update the stockSymbol property\n    if (!stockSymbol) {\n      alert('Please enter a valid stock symbol.');\n      return;\n    }\n  };\n\n  private async fetchStockPriceForStockSymbol(stockSymbol: string) {\n    this.appState = 'loading';\n    const response = await fetch(`https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=${stockSymbol}&apikey=964XYIDUV8SBYCB0`);\n    const data = await response.json();\n    this.appState = 'success';\n    const stockPrice = data['Global Quote'] ? data['Global Quote']['05. price'] : '0.00';\n    this.stockPrice = stockPrice;\n  }\n\n  render() {\n    return [\n      <stock-finder style={{ marginLeft: '-16px', border: '0px', marginTop: '0px' }}></stock-finder>,\n      <form onSubmit={this.fetchStockPrice} style={{ margin: 'auto', padding: '1rem' }}>\n        <label htmlFor=\"stock-symbol\">Enter Stock Symbol:</label>\n        <input type=\"text\" id=\"stock-symbol\" name=\"stock-symbol\" placeholder=\"e.g., AAPL, GOOGL\" ref={el => (this.input = el)} value={this.stockSymbol} />\n        <button type=\"submit\">Get Price</button>\n      </form>,\n      <div>\n        <p id=\"stock-price\">\n          {this.appState == 'loading' ? (\n            <stock-loading></stock-loading>\n          ) : this.appState === 'success' ? (\n            `Current Price: ${this.stockPrice}`\n          ) : this.appState === 'error' ? (\n            'Something went wrong'\n          ) : (\n            ''\n          )}\n        </p>\n      </div>,\n    ];\n  }\n}\n"]}